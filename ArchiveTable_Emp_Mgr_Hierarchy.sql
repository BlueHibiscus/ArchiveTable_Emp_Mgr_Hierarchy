

-----------------RECURSIVE STORED PROCEDURES-------------
/* AS TRANSACT-SQL SUPPORTS RECURSION, YOU CAN WRITE STORED PROCEDURES THAT CAN CALL ITSELF UPTO THE MAXIMUM NESTING LEVEL OF 32.*/

--****************STEP 1:*****************--

-- TO CHECK THE EXISTENCE OF THE PROCEDURE --

IF OBJECT_ID('FINDBOSS_PROC') IS NOT NULL 
DROP PROC FINDBOSS_PROC
GO

--TO CHECK EMPLOYEE MANAGER HIERARCHY --
/* TO CAPTURE THE EMPLOYEE MANAGER HIERARCHY RECURSIONS AFTER EVERY TRANSACTIONS WITHIN EMPLOYEE AND THEIR RESPECTIVE MANAGERS 
   ARE CHECKED HERE. */
   
    
CREATE PROC FINDBOSS_PROC(@EMPLOYEEID INT)
AS
BEGIN

	DECLARE @MANAGERID INT,@FIRSTNAME VARCHAR(30),@LASTNAME VARCHAR(30)
	
	--SELF INNER JOIN WITHIN THE EMPLOYEES AND MANAGERS IN BASE TABLE-- 
	
			SELECT  E.EMPLOYEEID EMPLOYEE_NO, E.FIRSTNAME EMPLOYEE_FIRSTNAME, E.LASTNAME EMPLOYEE_LASTNAME,
		   		E1.EMPLOYEEID MANAGER_EMPLOYEE_NO, E1.FIRSTNAME MANAGER_FIRSTNAME, E1.LASTNAME MANAGER_LASTNAME
				FROM HUMANRESOURCE.MYEMPLOYEESDETAILS E 
	       				INNER JOIN 
		 		     HUMANRESOURCE.MYEMPLOYEESDETAILS E1
					ON E.MANAGERID = E1.EMPLOYEEID
				AND E.EMPLOYEEID =@EMPLOYEEID 

			 SELECT @EMPLOYEEID=EMPLOYEEID, @FIRSTNAME =FIRSTNAME, @MANAGERID = MANAGERID
		   		FROM HUMANRESOURCE.MYEMPLOYEESDETAILS 
		   		WHERE EMPLOYEEID  = @EMPLOYEEID
		   

 /* EACH TIME A STORED PROCEDURE CALLS ANOTHER STORED PROCEDURE.THE NESTING LEVEL IS INCREMENTED. WHEN THE MAXIMUM OF 32 IS EXCEEDED, THE TRANSACTION IS TEMINATED */
 
			IF @MANAGERID IS NOT NULL AND @@NESTLEVEL <= 32
				BEGIN
					--SELECT @ENAME AS NAME,@Empno  AS Employee, @Mgr  AS Manager
 				
				EXEC FINDBOSS_PROC @MANAGERID
				END
END


-- EXECUTE THE STORED PROCEDURE--

EXEC FINDBOSS_PROC 303



--****************STEP 2:*****************--


/*  THE BASE TABLE HAS A LOT OF CURRENT AND HISTORIC DATA THAT IS NOT OFTEN REFERENCED. ARCHIVE TABLE IS CREATED TO STORE OLD DATA AND THE BASE TABLE CONTAINS RECENT DATA.
	THEREBY DOING A QUICK TABLE SCAN AND IMPROVING PERFORMANCE TUNING */ 


/*  SET NOCOUNT "ON" PREVENTS TO SHOW THE NUMBER OF AFFECTED ROWS IN MESSAGE PANE.BY DEFAULT IT IS "OFF" */
	 
SET NOCOUNT ON 
USE SQLSTUDIES
GO

--TO CHECK THE EXISTENCE OF THE STORED PROCEDURE--

IF OBJECT_ID ('SORTYEAR_PROC') IS NOT NULL 
DROP PROC SORTYEAR_PROC
GO

CREATE PROC SORTYEAR_PROC
AS

BEGIN

-- CREATING AN ARCHIVE TABLE AND POPULATING ALL RECORDS FROM BASE TABLE --
			SELECT * INTO HUMANRESOURCE.MYEMPLOYEESDETAILS_ARCH
				FROM HUMANRESOURCE.MYEMPLOYEESDETAILS 

/* SEGREGATING RECORDS WITH ACTIVE 1 BETWEEN BASE TABLE AND ARCHIVE TABLE HAVING HIREDATE FROM THE YEAR 2012.EMPLOYEES HIRED PRIOR 2012 ARE PUSHED IN ARCHIVE TABLE WHILE
   THE EMPLOYEES HIRED AFTER 2012 REMAIN IN BASE TABLE  */ 
   
   
			DELETE FROM HUMANRESOURCE.MYEMPLOYEESDETAILS WHERE YEAR(HIREDATE) < 2012
				AND ACTIVE = 0

			DELETE FROM HUMANRESOURCE.MYEMPLOYEESDETAILS_ARCH WHERE YEAR(HIREDATE)>= 2012
				OR ACTIVE <> 0	
END


-- EXECUTING THE PROCEDURE--

EXEC SORTYEAR_PROC


--****************STEP 3:*****************--
--IF THE PROCEDURE IS ALREADY CREATED, IT IS DROPPED AND CREATED WITH THE SAME NAME --

IF OBJECT_ID ('MANIPULATION_PROC') IS NOT NULL 
DROP PROC MANIPULATION_PROC
GO

/*CREATING STORED PROCEDURE WITH EQUAL NUMBER OF INPUT PARAMETERS AS THE COLUMNS  IN THE TABLE */ 

CREATE PROC MANIPULATION_PROC
							  (
							  @EMPLOYEEID INT,
							  @CARDNO VARCHAR(30),
							  @FIRSTNAME VARCHAR(30),
							  @LASTNAME VARCHAR(20),
							  @GENDER NCHAR(1),
							  @TITLE NVARCHAR(100),
							  @MANAGERID INT,
							  @HIREDATE DATE,
							  @SALARY MONEY,
							  @BIRTHDATE DATE,
							  @MARITALSTATUS NCHAR(1),
							  @DEPARTMENTID INT
							  )
AS
BEGIN

-- VALIDATION TO CHECK THE DATA INTEGRITY FOR AUTHENTIC DATA INSERTIONS AND AVOIDING INCORRECT DATA ENTRY --
  
		IF EXISTS(SELECT * FROM HUMANRESOURCE.MYEMPLOYEESDETAILS WHERE EMPLOYEEID = @EMPLOYEEID)
		
		BEGIN
		
		--OUTPUT COMMAND--
			PRINT 'EMPLOYEE WITH THIS NUMBER ALREADY EXISTS'
			RETURN
		END

		
--VALIDATION TO CHECK THAT  EMPLOYEEID CANNOT BE INSERTED WITH A NULL --
		
		IF @EMPLOYEEID IS NULL
		BEGIN
			PRINT 'PLEASE ENTER EMPLOYEE IDENTITY NUMBER'
			RETURN
		END

--VALIDATION TO CHECK THAT NO NEW DATA CAN BE ENTERED IN THE BASE TABLE WHERE HIREDATE IS ON OR BEFORE THE YEAR 2015 --
		
		IF YEAR(@HIREDATE) <= 2015
		BEGIN
			PRINT 'THIS RECORD CANNOT BE INSERTED'
			RETURN
		END

-- VALIDATIOB TO CHECK THAT MANAGER IS ALSO AN EMPLOYEE OF THE COMPANY--
		   
		IF NOT EXISTS (SELECT * FROM HUMANRESOURCE.MYEMPLOYEESDETAILS WHERE EMPLOYEEID = @MANAGERID)
		BEGIN
		        PRINT 'THIS MANAGER DOES NOT EXISTS'
			RETURN
		END


/* POPULATING OLDEST RECORDS INTO ARCHIVE TABLE FROM BASE TABLE */

		INSERT HUMANRESOURCE.MYEMPLOYEESDETAILS_ARCH 
			SELECT * FROM HUMANRESOURCE.MYEMPLOYEESDETAILS
			  WHERE YEAR(HIREDATE) = (
									SELECT TOP 1 YEAR(HIREDATE)
									FROM HUMANRESOURCE.MYEMPLOYEESDETAILS 
									WHERE ACTIVE = 0 
									ORDER BY HIREDATE)
			  AND MONTH(HIREDATE) = (
									SELECT TOP 1 MONTH(HIREDATE)
									FROM HUMANRESOURCE.MYEMPLOYEESDETAILS
									WHERE ACTIVE = 0
									ORDER BY HIREDATE
									)

			  AND DAY(HIREDATE) = (
									SELECT TOP 1 DAY(HIREDATE)
									FROM HUMANRESOURCE.MYEMPLOYEESDETAILS
									WHERE ACTIVE = 0
									ORDER BY HIREDATE
									)
	
/* SIMULANEOUSLY, DELETING OLDEST RECORDS FROM BASE TABLE SORTING WITH THE YEAR,MONTH AND DAY IN ASCENDING ORDER */
	
		DELETE FROM HUMANRESOURCE.MYEMPLOYEESDETAILS
			 WHERE YEAR(HIREDATE) =(
									SELECT TOP 1 YEAR(HIREDATE)
									FROM HUMANRESOURCE.MYEMPLOYEESDETAILS
									WHERE ACTIVE = 0
									ORDER BY HIREDATE
								   )
									
			 AND MONTH(HIREDATE) = (
									SELECT TOP 1 MONTH(HIREDATE)
									FROM HUMANRESOURCE.MYEMPLOYEESDETAILS 
									WHERE ACTIVE = 0
									ORDER BY HIREDATE
								   )

			 AND DAY(HIREDATE) = (
									SELECT TOP 1 DAY(HIREDATE)
									FROM HUMANRESOURCE.MYEMPLOYEESDETAILS 
									WHERE ACTIVE = 0
									ORDER BY HIREDATE
								   )

/* SIMULTANEOUSLY, DELETING THE OLDEST RECORD FROM ARCHIVE TABLE WHEN A NEW RECORD IS INSERTED FROM BASE TABLE */
	
		DELETE  FROM HUMANRESOURCE.MYEMPLOYEESDETAILS_arch
			WHERE YEAR(Hiredate) =(
									SELECT TOP 1 YEAR(HIREDATE)
									FROM HUMANRESOURCE.MYEMPLOYEESDETAILS_ARCH
									WHERE ACTIVE = 0
									ORDER BY HIREDATE
									)
									
			AND MONTH(HIREDATE) =  (
									SELECT TOP 1 MONTH(HIREDATE)
									FROM HUMANRESOURCE.MYEMPLOYEESDETAILS_ARCH 
									WHERE ACTIVE = 0
									ORDER BY HIREDATE
									)

			AND DAY(HIREDATE) =  (
									SELECT TOP 1 DAY(HIREDATE)
									FROM HUMANRESOURCE.MYEMPLOYEESDETAILS_ARCH 
									WHERE ACTIVE = 0
									ORDER BY HIREDATE
									)

--VALIDATING TO CHECK THE EXISTANCE OF A NEW EMPLOYEEID IN BASE TABLE--
		        IF NOT EXISTS (SELECT * FROM HUMANRESOURCE.MYEMPLOYEESDETAILS WHERE EMPLOYEEID = @EMPLOYEEID)
		             
			BEGIN
	 
--INSERTING A NEW RECORD IN BASE TABLE--

		        INSERT HUMANRESOURCE.MYEMPLOYEESDETAILS VALUES
						  			(	  
									  @EMPLOYEEID,
							 		  @CARDNO,
							 		  @FIRSTNAME,
									  @LASTNAME,
									  @GENDER,
									  @TITLE,
									  @MANAGERID,
									  @HIREDATE,
									  @SALARY,
									  @BIRTHDATE,
									  @MARITALSTATUS,
									  @DEPARTMENTID
						 			 )
	 		   PRINT 'RECORD INSERTED'
	
			END
END


--------EXECUTING THE STORED PROCEDURE----------

EXEC MANIPULATION_PROC 312,'5405-2345','Venkat','Rao','M','Sales Junior',301,'2021-05-04',22000, '1997-10-12','M',0


------- CHECK THE DATA IN BASE AND ARCHIVE TABLES ---------
SELECT * FROM HUMANRESOURCE.MYEMPLOYEESDETAILS
SELECT * FROM HUMANRESOURCE.MYEMPLOYEESDETAILS_ARCH


--------TO CHECK THE CURRENT EMPLOYEE - MANAGER HEIRARCHY --------

--****************STEP 4:*****************--
EXEC FINDBOSS_PROC 303
